"""
A general linear algebra library
"""
from __future__ import annotations
import typing
__all__: list[str] = ['Vector2']
class Vector2:
    @staticmethod
    def from_mag_ang(arg0: typing.SupportsFloat, arg1: typing.SupportsFloat) -> Vector2:
        ...
    def __add__(self, arg0: Vector2) -> Vector2:
        ...
    def __iadd__(self, arg0: Vector2) -> Vector2:
        ...
    def __imul__(self, arg0: typing.SupportsFloat) -> Vector2:
        ...
    def __init__(self, x: typing.SupportsFloat = 0.0, y: typing.SupportsFloat = 0.0) -> None:
        ...
    def __isub__(self, arg0: Vector2) -> Vector2:
        ...
    def __itruediv__(self, arg0: typing.SupportsFloat) -> Vector2:
        ...
    def __mul__(self, arg0: typing.SupportsFloat) -> Vector2:
        ...
    def __repr__(self) -> str:
        ...
    def __rmul__(self, arg0: typing.SupportsFloat) -> Vector2:
        ...
    def __rtruediv__(self, arg0: typing.SupportsFloat) -> Vector2:
        ...
    def __sub__(self, arg0: Vector2) -> Vector2:
        ...
    def __truediv__(self, arg0: typing.SupportsFloat) -> Vector2:
        ...
    def angle(self) -> float:
        ...
    def mag(self) -> float:
        ...
    def unit(self) -> Vector2:
        ...
    @typing.overload
    def x(self) -> float:
        ...
    @typing.overload
    def x(self, x: typing.SupportsFloat) -> None:
        ...
    @typing.overload
    def y(self) -> float:
        ...
    @typing.overload
    def y(self, y: typing.SupportsFloat) -> None:
        ...
